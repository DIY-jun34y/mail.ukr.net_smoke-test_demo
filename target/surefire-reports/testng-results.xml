<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" total="15" passed="15">
  <reporter-output>
  </reporter-output>
  <suite name="Suite" duration-ms="95953" started-at="2015-09-12T22:08:29Z" finished-at="2015-09-12T22:10:05Z">
    <groups>
    </groups>
    <test name="Test" duration-ms="95953" started-at="2015-09-12T22:08:29Z" finished-at="2015-09-12T22:10:05Z">
      <class name="tests.SmokeTest">
        <test-method status="PASS" signature="setup(java.lang.String)[pri:0, instance:tests.SmokeTest@14e1705]" name="setup" is-config="true" duration-ms="3641" started-at="2015-09-13T01:08:29Z" finished-at="2015-09-13T01:08:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Firefox]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="test_Login(java.lang.String, java.lang.String, java.lang.Boolean, java.lang.String)[pri:0, instance:tests.SmokeTest@14e1705]" name="test_Login" duration-ms="4953" started-at="2015-09-13T01:08:32Z" description="As a User I can login only with valid credentials" data-provider="login" finished-at="2015-09-13T01:08:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[tester0667804531]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[p455word]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Valid credentials]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Login -->
        <test-method status="PASS" signature="newSoftAssertObject()[pri:0, instance:tests.SmokeTest@14e1705]" name="newSoftAssertObject" is-config="true" duration-ms="0" started-at="2015-09-13T01:08:32Z" finished-at="2015-09-13T01:08:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- newSoftAssertObject -->
        <test-method status="PASS" signature="newSoftAssertObject()[pri:0, instance:tests.SmokeTest@14e1705]" name="newSoftAssertObject" is-config="true" duration-ms="0" started-at="2015-09-13T01:08:37Z" finished-at="2015-09-13T01:08:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- newSoftAssertObject -->
        <test-method status="PASS" signature="test_Login(java.lang.String, java.lang.String, java.lang.Boolean, java.lang.String)[pri:0, instance:tests.SmokeTest@14e1705]" name="test_Login" duration-ms="1453" started-at="2015-09-13T01:08:37Z" description="As a User I can login only with valid credentials" data-provider="login" finished-at="2015-09-13T01:08:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[tester0667804531]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[wrong_pass]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Неверно указан логин или пароль. Подробнее]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Login -->
        <test-method status="PASS" signature="test_Login(java.lang.String, java.lang.String, java.lang.Boolean, java.lang.String)[pri:0, instance:tests.SmokeTest@14e1705]" name="test_Login" duration-ms="984" started-at="2015-09-13T01:08:39Z" description="As a User I can login only with valid credentials" data-provider="login" finished-at="2015-09-13T01:08:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[wrong_login_name]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[p455word]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Неверно указан логин или пароль. Подробнее]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Login -->
        <test-method status="PASS" signature="newSoftAssertObject()[pri:0, instance:tests.SmokeTest@14e1705]" name="newSoftAssertObject" is-config="true" duration-ms="0" started-at="2015-09-13T01:08:39Z" finished-at="2015-09-13T01:08:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- newSoftAssertObject -->
        <test-method status="PASS" signature="newSoftAssertObject()[pri:0, instance:tests.SmokeTest@14e1705]" name="newSoftAssertObject" is-config="true" duration-ms="0" started-at="2015-09-13T01:08:40Z" finished-at="2015-09-13T01:08:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- newSoftAssertObject -->
        <test-method status="PASS" signature="test_CreateMessage()[pri:0, instance:tests.SmokeTest@14e1705]" name="test_CreateMessage" duration-ms="6859" started-at="2015-09-13T01:08:40Z" description="As a User I can create a message(it&#039;s stored in Drafts automatically)" finished-at="2015-09-13T01:08:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_CreateMessage -->
        <test-method status="PASS" signature="newSoftAssertObject()[pri:0, instance:tests.SmokeTest@14e1705]" name="newSoftAssertObject" is-config="true" duration-ms="0" started-at="2015-09-13T01:08:47Z" finished-at="2015-09-13T01:08:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- newSoftAssertObject -->
        <test-method status="PASS" signature="test_SendMessage()[pri:0, instance:tests.SmokeTest@14e1705]" name="test_SendMessage" duration-ms="15000" started-at="2015-09-13T01:08:47Z" description="As a User I can send a message (it&#039;s stored in Sent automatically)" finished-at="2015-09-13T01:09:02Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_SendMessage -->
        <test-method status="PASS" signature="newSoftAssertObject()[pri:0, instance:tests.SmokeTest@14e1705]" name="newSoftAssertObject" is-config="true" duration-ms="0" started-at="2015-09-13T01:09:02Z" finished-at="2015-09-13T01:09:02Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- newSoftAssertObject -->
        <test-method status="PASS" signature="test_OpenInboxMessage()[pri:0, instance:tests.SmokeTest@14e1705]" name="test_OpenInboxMessage" duration-ms="4297" started-at="2015-09-13T01:09:02Z" description="As a User I can open inbox message from list" finished-at="2015-09-13T01:09:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_OpenInboxMessage -->
        <test-method status="PASS" signature="newSoftAssertObject()[pri:0, instance:tests.SmokeTest@14e1705]" name="newSoftAssertObject" is-config="true" duration-ms="0" started-at="2015-09-13T01:09:06Z" finished-at="2015-09-13T01:09:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- newSoftAssertObject -->
        <test-method status="PASS" signature="test_ReplyToMessage()[pri:0, instance:tests.SmokeTest@14e1705]" name="test_ReplyToMessage" duration-ms="10125" started-at="2015-09-13T01:09:06Z" description="As a User I can reply to inbox message" finished-at="2015-09-13T01:09:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_ReplyToMessage -->
        <test-method status="PASS" signature="newSoftAssertObject()[pri:0, instance:tests.SmokeTest@14e1705]" name="newSoftAssertObject" is-config="true" duration-ms="0" started-at="2015-09-13T01:09:16Z" finished-at="2015-09-13T01:09:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- newSoftAssertObject -->
        <test-method status="PASS" signature="test_ForwardInboxMessage()[pri:0, instance:tests.SmokeTest@14e1705]" name="test_ForwardInboxMessage" duration-ms="8313" started-at="2015-09-13T01:09:16Z" description="As a User I can forward inbox message" finished-at="2015-09-13T01:09:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_ForwardInboxMessage -->
        <test-method status="PASS" signature="newSoftAssertObject()[pri:0, instance:tests.SmokeTest@14e1705]" name="newSoftAssertObject" is-config="true" duration-ms="0" started-at="2015-09-13T01:09:24Z" finished-at="2015-09-13T01:09:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- newSoftAssertObject -->
        <test-method status="PASS" signature="test_Read_And_Move_ToTrash()[pri:0, instance:tests.SmokeTest@14e1705]" name="test_Read_And_Move_ToTrash" duration-ms="5140" started-at="2015-09-13T01:09:24Z" description="As a User I can move opened Inbox message to Trash immediately)" finished-at="2015-09-13T01:09:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Read_And_Move_ToTrash -->
        <test-method status="PASS" signature="test_Move_FromInboxList_ToTrash()[pri:0, instance:tests.SmokeTest@14e1705]" name="test_Move_FromInboxList_ToTrash" duration-ms="4297" started-at="2015-09-13T01:09:29Z" description="As a User I can move a message to Trash from Inbox-list " finished-at="2015-09-13T01:09:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Move_FromInboxList_ToTrash -->
        <test-method status="PASS" signature="newSoftAssertObject()[pri:0, instance:tests.SmokeTest@14e1705]" name="newSoftAssertObject" is-config="true" duration-ms="0" started-at="2015-09-13T01:09:29Z" finished-at="2015-09-13T01:09:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- newSoftAssertObject -->
        <test-method status="PASS" signature="test_Recover_FromTrashList_ToInbox()[pri:0, instance:tests.SmokeTest@14e1705]" name="test_Recover_FromTrashList_ToInbox" duration-ms="4344" started-at="2015-09-13T01:09:34Z" description="As a User I can recover message from Trash back to Inbox" finished-at="2015-09-13T01:09:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Recover_FromTrashList_ToInbox -->
        <test-method status="PASS" signature="newSoftAssertObject()[pri:0, instance:tests.SmokeTest@14e1705]" name="newSoftAssertObject" is-config="true" duration-ms="0" started-at="2015-09-13T01:09:34Z" finished-at="2015-09-13T01:09:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- newSoftAssertObject -->
        <test-method status="PASS" signature="test_Move_FromInboxList_ToSpam()[pri:0, instance:tests.SmokeTest@14e1705]" name="test_Move_FromInboxList_ToSpam" duration-ms="3562" started-at="2015-09-13T01:09:38Z" description="As a User I can move a message to Spam directly from Inbox" finished-at="2015-09-13T01:09:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Move_FromInboxList_ToSpam -->
        <test-method status="PASS" signature="newSoftAssertObject()[pri:0, instance:tests.SmokeTest@14e1705]" name="newSoftAssertObject" is-config="true" duration-ms="0" started-at="2015-09-13T01:09:38Z" finished-at="2015-09-13T01:09:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- newSoftAssertObject -->
        <test-method status="PASS" signature="newSoftAssertObject()[pri:0, instance:tests.SmokeTest@14e1705]" name="newSoftAssertObject" is-config="true" duration-ms="0" started-at="2015-09-13T01:09:42Z" finished-at="2015-09-13T01:09:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- newSoftAssertObject -->
        <test-method status="PASS" signature="test_Recover_FromSpamList_ToInbox()[pri:0, instance:tests.SmokeTest@14e1705]" name="test_Recover_FromSpamList_ToInbox" duration-ms="3766" started-at="2015-09-13T01:09:42Z" description="As a User I can recover message from Spam folder (back to Inbox)" finished-at="2015-09-13T01:09:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Recover_FromSpamList_ToInbox -->
        <test-method status="PASS" signature="newSoftAssertObject()[pri:0, instance:tests.SmokeTest@14e1705]" name="newSoftAssertObject" is-config="true" duration-ms="0" started-at="2015-09-13T01:09:45Z" finished-at="2015-09-13T01:09:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- newSoftAssertObject -->
        <test-method status="PASS" signature="test_DragAndDrop_InboxToSpam()[pri:0, instance:tests.SmokeTest@14e1705]" name="test_DragAndDrop_InboxToSpam" duration-ms="6219" started-at="2015-09-13T01:09:45Z" description="As a User I can drag-n-drop selected message from Inbox to Spam folder)" finished-at="2015-09-13T01:09:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DragAndDrop_InboxToSpam -->
        <test-method status="PASS" signature="newSoftAssertObject()[pri:0, instance:tests.SmokeTest@14e1705]" name="newSoftAssertObject" is-config="true" duration-ms="0" started-at="2015-09-13T01:09:52Z" finished-at="2015-09-13T01:09:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- newSoftAssertObject -->
        <test-method status="PASS" signature="test_Send_With_Attachment()[pri:0, instance:tests.SmokeTest@14e1705]" name="test_Send_With_Attachment" duration-ms="12437" started-at="2015-09-13T01:09:52Z" finished-at="2015-09-13T01:10:04Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Send_With_Attachment -->
        <test-method status="PASS" signature="tearDown()[pri:0, instance:tests.SmokeTest@14e1705]" name="tearDown" is-config="true" duration-ms="532" started-at="2015-09-13T01:10:04Z" finished-at="2015-09-13T01:10:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.SmokeTest -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
